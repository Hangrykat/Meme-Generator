{"version":3,"sources":["Components/Header/Header.js","context.js","Components/Buttons/Buttons.js","Components/Meme/Meme.js","Components/MemesWrapper/MemesWrapper.js","Components/Footer/Footer.js","Components/PreviewWrapper/PreviewWrapper.js","Components/EditorWrapper/EditorWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","StateContext","createContext","ContextProvider","children","useState","memes","setMemes","imgData","setImgData","selectedMemeSrc","setSelectedMemeSrc","currentMemeIdx","setCurrentMemeIdx","inputs","setInputs","loading","setLoading","useEffect","fetch","then","response","json","allMemes","data","slice","catch","error","console","log","message","Provider","value","Buttons","openModal","setOpenModal","useContext","ref","useRef","clickGenerate","obj","username","password","template_id","id","arr","map","v","idx","join","Object","entries","key","querifyObj","method","res","url","current","focus","select","disabled","onClick","style","width","textAlign","network","target","margin","Meme","props","e","src","Array","box_count","fill","pic","alt","MemesWrapper","length","meme","type","color","height","Footer","href","rel","PreviewWrapper","EditorWrapper","input","onChange","c","i","updateInputs","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50330890.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./Header.css\"\r\n\r\nfunction Header() {\r\n    return ( \r\n        <div className = \"Header\"> Epic Meme Generator </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const StateContext = createContext({});\r\n\r\nconst ContextProvider = ({ children }) => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [imgData, setImgData] = useState(null);\r\n  const [selectedMemeSrc, setSelectedMemeSrc] = useState(null);\r\n  const [currentMemeIdx, setCurrentMemeIdx] = useState(null);\r\n  const [inputs, setInputs] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch('https://api.imgflip.com/get_memes')\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const allMemes = json.data.memes.slice(0, 90);\r\n        setMemes(allMemes);\r\n      })\r\n      .catch((error) => console.log(error.message));\r\n  }, []);\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        loading,\r\n        setLoading,\r\n        currentMemeIdx,\r\n        setCurrentMemeIdx,\r\n        inputs,\r\n        setInputs,\r\n        memes,\r\n        selectedMemeSrc,\r\n        setSelectedMemeSrc,\r\n        imgData,\r\n        setImgData,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ContextProvider;\r\n","import React, { useContext, useState, useRef, useEffect } from 'react';\r\nimport {SocialIcon} from \"react-social-icons\"\r\n\r\nimport './Button.css';\r\nimport { StateContext } from '../../context';\r\n\r\n// code that is commented out is for the future upload feature\r\n\r\nfunction Buttons() {\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const {\r\n    // setImgData,\r\n    imgData,\r\n    memes,\r\n    currentMemeIdx,\r\n    inputs,\r\n    // setInputs,\r\n    setSelectedMemeSrc,\r\n    selectedMemeSrc,\r\n    setLoading,\r\n  } = useContext(StateContext);\r\n\r\n  const ref = useRef();\r\n  // const upload = useRef();\r\n\r\n  useEffect(() => {\r\n    if (openModal) {\r\n      ref.current.focus();\r\n      ref.current.select();\r\n    }\r\n  }, [openModal]);\r\n\r\n  // const reader = new FileReader();\r\n\r\n  // function onUpload(e) {\r\n  //   reader.readAsDataURL(e.target.files[0]);\r\n  //   reader.addEventListener('load', () => {\r\n  //     setImgData(reader.result);\r\n  //     setSelectedMemeSrc(null);\r\n  //     upload.current.value = '';\r\n  //   });\r\n  //   setInputs(['', '']);\r\n  // }\r\n\r\n  const querifyObj = (obj) => {\r\n    const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n    return '?' + params.join('&');\r\n  };\r\n\r\n  function clickGenerate() {\r\n    setLoading(true);\r\n    const currentMeme = memes[currentMemeIdx];\r\n\r\n    const obj = {\r\n      username: 'Beerios',\r\n      password: 'letmeusethis',\r\n      template_id: currentMeme.id,\r\n    };\r\n    const arr = inputs.map((v, idx) => `boxes[${idx}][text]=${v}`).join('&');\r\n\r\n    \r\n      fetch(`https://api.imgflip.com/caption_image${querifyObj(obj)}&${arr}`, {\r\n        method: 'POST',\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          setLoading(false);\r\n          if (res.data) setSelectedMemeSrc(res.data.url);\r\n        });\r\n  }\r\n\r\n  return (\r\n    <div className=\"ButtonWrapper\">\r\n      {/* <input\r\n        type=\"file\"\r\n        ref={upload}\r\n        className=\"custom-file-input\"\r\n        onChange={onUpload}\r\n      /> */}\r\n      <button\r\n        disabled={selectedMemeSrc !== null ? false : true}\r\n        onClick={() => {\r\n          if (!imgData) clickGenerate();\r\n          if (selectedMemeSrc) clickGenerate();\r\n        }}\r\n      >\r\n        Generate\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => setOpenModal(true)}\r\n        disabled={selectedMemeSrc !== null ? false : true}\r\n      >\r\n        Share\r\n      </button>\r\n      {openModal && (\r\n        <div className=\"overlay\">\r\n          <div className=\"popup\">\r\n            <h2>Share</h2>\r\n            <span onClick={() => setOpenModal(false)} className=\"close\">\r\n              &times;\r\n            </span>\r\n            <input\r\n              ref={ref}\r\n              style={{ width: '70%', textAlign: 'center' }}\r\n              className=\"content\"\r\n              value={selectedMemeSrc}\r\n            />\r\n            <div className=\"SocialIconsWrapper\">\r\n              <SocialIcon network=\"twitter\" url={`http://twitter.com/share?text=${\"Check This Out!\"}&url=${selectedMemeSrc}` } target=\"_blank\" style={{margin: 5}} />\r\n              <SocialIcon network=\"facebook\" url={`http://www.facebook.com/sharer.php?u=${selectedMemeSrc}`}  target=\"_blank\" style={{margin: 5}} />\r\n              <SocialIcon network=\"instagram\" url=\"https://instagram.com\" target=\"_blank\" style={{margin: 5}} />\r\n              <SocialIcon network=\"pinterest\" url={`http://pinterest.com/pin/create/button/?url=${selectedMemeSrc}&description=${\"Check This Out!\"}`} target=\"_blank\" style={{margin: 5}} />              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { useContext } from 'react';\r\nimport './Meme.css';\r\n\r\nimport { StateContext } from '../../context';\r\n\r\nfunction Meme(props) {\r\n  const {\r\n    setSelectedMemeSrc,\r\n    setImgData,\r\n    memes,\r\n    setInputs,\r\n    setCurrentMemeIdx,\r\n  } = useContext(StateContext);\r\n\r\n  function clickHandler(e) {\r\n    setImgData(null);\r\n    setSelectedMemeSrc(e.target.src);\r\n    setCurrentMemeIdx(props.idx);\r\n    setInputs(Array(memes[props.idx].box_count).fill(''));\r\n  }\r\n\r\n  return (\r\n    <div className=\"MemeContainer\">\r\n      <img onClick={clickHandler} src={props.pic} alt=\"meme\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meme;\r\n","import React, { useContext } from 'react';\r\nimport './MemesWrapper.css';\r\nimport Meme from '../Meme/Meme';\r\nimport { StateContext } from '../../context';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nfunction MemesWrapper() {\r\n  const { memes } = useContext(StateContext);\r\n\r\n  return (\r\n    <div className=\"MemesSection\">\r\n      <div className=\"Title\">Choose Popular Memes</div>\r\n      <div className=\"MemeCollection\">\r\n        <div className=\"MemesWrapper\">\r\n          {memes.length >= 90 ? (\r\n            memes.map((meme, idx) => (\r\n              <Meme key={idx} pic={meme.url} idx={idx} />\r\n            ))\r\n          ) : (\r\n            <Loader type=\"Circles\" color=\"#1ab188\" height={150} width={150} />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemesWrapper;\r\n","import React from \"react\"\r\n\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n    return ( \r\n    <div className=\"footer\">  Developed By:\r\n    <span>  Neo Erick Radhika</span> \r\n    <div className=\"Reference\">Special thanks to: </div>\r\n    <a \r\n    href=\"https://imgflip.com\"\r\n    target=\"_blank\"\r\n    rel=\"noopener noreferrer\"\r\n    >Image Flip</a>\r\n    </div> \r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useContext } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport './PreviewWrapper.css';\r\nimport { StateContext } from '../../context';\r\n\r\nfunction PreviewWrapper() {\r\n  const { selectedMemeSrc, imgData, loading } = useContext(StateContext);\r\n\r\n  return (\r\n    <div className=\"PreviewWrapper\">\r\n      {loading ? (\r\n        <Loader type=\"Circles\" color=\"#1ab188\" height={150} width={150} />\r\n      ) : (\r\n        <img alt=\"meme\" src={imgData ? imgData : selectedMemeSrc} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PreviewWrapper;\r\n","import React, { useContext } from 'react';\r\nimport './EditorWrapper.css';\r\n\r\nimport { StateContext } from '../../context';\r\n\r\nfunction EditorWrapper() {\r\n  const { inputs, setInputs } = useContext(StateContext);\r\n\r\n  const updateInputs = (e, idx) => {\r\n    const value = e.target.value || '';\r\n    setInputs(\r\n      inputs.map((c, i) => {\r\n        return idx === i ? value : c;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"EditorWrapper\">\r\n      {inputs.map((input, idx) => (\r\n        <input\r\n          key={idx}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            updateInputs(e, idx);\r\n          }}\r\n          value={input}\r\n          placeholder=\"Enter text\"\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditorWrapper;\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport Header from './Components/Header/Header';\r\nimport Buttons from './Components/Buttons/Buttons';\r\nimport MemesWrapper from './Components/MemesWrapper/MemesWrapper';\r\nimport Footer from './Components/Footer/Footer';\r\nimport PreviewWrapper from './Components/PreviewWrapper/PreviewWrapper';\r\nimport EditorWrapper from './Components/EditorWrapper/EditorWrapper';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"Main\">\r\n        <div className=\"PanelsWrapper\">\r\n          <div className=\"Panel\">\r\n            <PreviewWrapper />\r\n          </div>\r\n          <div className=\"Panel\">\r\n            <EditorWrapper />\r\n            <Buttons />\r\n          </div>\r\n        </div>\r\n        <MemesWrapper />\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ContextProvider from './context';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContextProvider>\r\n      <App />\r\n    </ContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}